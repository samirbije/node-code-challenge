{"version":3,"sources":["components/message-form-page/index.ts","components/message-form-page/renderer/index.tsx","App.js","serviceWorker.js","index.js"],"names":["MessageFormPage","props","handleChange","event","field","target","name","setState","state","value","validateEmptyValue","item","label","error_msg","length","push","validateMaxMessageSize","size","makeApiCall","username","text","data","fetch","method","headers","body","JSON","stringify","then","res","ok","alert","json","err","console","log","message","catch","e","handleSubmit","preventDefault","join","onSubmit","this","className","type","placeholder","onChange","rows","cols","maxLength","React","PureComponent","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"yRAIaA,ECAb,kDACE,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAuBDC,aAAe,SAACC,GACrB,IAAIC,EAAQD,EAAME,OAAOC,KACzB,EAAKC,SAAL,2BACK,EAAKC,OADV,kBAEGJ,EAAQD,EAAME,OAAOI,UA5BF,EAgCjBC,mBAAqB,SAACC,EAAcC,GACzC,IAAIC,EAAY,GAIhB,OAHIF,EAAKG,OAAS,GAChBD,EAAUE,KAAV,UAAkBH,EAAlB,eAEKC,GArCe,EAwCdG,uBAAyB,SAACL,EAAcC,EAAeK,GAC/D,IAAIJ,EAAY,GAIhB,OAHIF,EAAKG,OAAS,KAChBD,EAAUE,KAAV,UAAkBH,EAAlB,2CAA0DK,IAErDJ,GA7Ce,EAgDdK,YAAc,SAACC,EAAkBC,GACzC,IACIC,EAAO,CACTF,WACAC,QAGaE,MANL,eAMgB,CACxBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAGdO,MAAK,SAACC,GACTA,EAAIC,GACN,EAAKvB,SAAS,CACZY,SAAU,GACVC,KAAM,KACL,WACDW,MAAM,mDAGRF,EAAIG,OAAOJ,MACT,SAACK,GACCC,QAAQC,IAAI,SAAUF,GACtBF,MAAME,EAAIG,YAEZC,OAAM,SAACC,GACPJ,QAAQC,IAAI,2CAGfE,OAAM,SAACJ,GACRC,QAAQC,IAAI,yBAlFQ,EAsFdI,aAAe,SAACpC,GACxBA,EAAMqC,iBACN,IAAIrB,EAAW,EAAKX,MAAMW,SACtBC,EAAO,EAAKZ,MAAMY,KAElBP,EAAY,GAChBA,EAAS,sBAAOA,GAAP,YAAqB,EAAKH,mBAAmBS,EAAU,cAChEN,EAAS,sBAAOA,GAAP,YAAqB,EAAKH,mBAAmBU,EAAM,gBAInC,KAHzBP,EAAS,sBAAOA,GAAP,YAAqB,EAAKG,uBAAuBI,EAAM,aAAc,UAGhEN,OAEZ,EAAKI,YAAYC,EAAUC,GAE3BW,MAAMlB,EAAU4B,KAAK,WAlGvB,EAAKjC,MAAQ,CACXW,SAAU,GACVC,KAAM,IALc,EAD1B,qDAYI,OACE,0BAAMsB,SAAUC,KAAKJ,cACnB,uBAAGK,UAAU,QAAb,yCADF,eAGE,2BAAOtC,KAAK,WAAWuC,KAAK,OAAOC,YAAY,gBAAgBrC,MAAOkC,KAAKnC,MAAMW,SAAU4B,SAAUJ,KAAKzC,eAH5G,kCAKE,8BAAUI,KAAK,OAAO0C,KAAM,GAAIC,KAAM,GAAIC,UAAW,IAAKJ,YAAY,SAASrC,MAAOkC,KAAKnC,MAAMY,KAAM2B,SAAUJ,KAAKzC,eACtH,6BACA,4BAAQ2C,KAAK,UAAb,aApBR,GAA8BM,IAAMC,eCqBrBC,MArBf,WACE,OACE,yBAAKT,UAAU,OACb,gCACE,kDAKF,8BACJ,kBAAC5C,EAAD,OAGI,4CAEE,uBAAGsD,KAAK,sBAAR,UAFF,OCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACLpC,QAAQoC,MAAMA,EAAMlC,c","file":"static/js/main.8aca8f37.chunk.js","sourcesContent":["\nimport React from 'react';\n\nimport {Renderer} from './renderer';\nexport const MessageFormPage=Renderer;","\nimport React from 'react';\n\n\nexport class Renderer extends React.PureComponent<{}, State> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      username: '',\n      text: ''\n    };\n\n  }\n\n  public render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <p className=\"bold\">Ho ho ho, what you want for christma?</p>\n        who are you?\n        <input name=\"username\" type=\"text\" placeholder=\"charlie.brown\" value={this.state.username} onChange={this.handleChange} />\n        what do you want for christmas?\n        <textarea name=\"text\" rows={10} cols={45} maxLength={100} placeholder=\"Gifts!\" value={this.state.text} onChange={this.handleChange}></textarea>\n        <br />\n        <button type=\"submit\">Send</button>\n      </form>\n    );\n  }\n\n  public handleChange = (event:any): void => {\n    let field = event.target.name as keyof State;\n    this.setState({\n      ...this.state,\n      [field]: event.target.value,\n    });\n  }\n\n  public validateEmptyValue = (item: string, label: string) => {\n    let error_msg = [];\n    if (item.length < 1) {\n      error_msg.push(`${label} is Empty.`);\n    }\n    return error_msg\n  }\n\n  protected validateMaxMessageSize = (item: string, label: string, size: string) => {\n    let error_msg = [];\n    if (item.length > 100) {\n      error_msg.push(`${label} is too long. Supported size is ${size}`)\n    }\n    return error_msg\n  }\n\n  protected makeApiCall = (username: string, text: string) => {\n    let uri = \"/api/message\";\n    let data = {\n      username,\n      text\n    }\n\n    let api_call = fetch(uri, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\n    api_call.then((res) => {\n      if (res.ok) {\n        this.setState({\n          username: '',\n          text: ''\n        }, () => {\n          alert(\"Successfully received the message and queued\");\n        })\n      } else {\n        res.json().then(\n          (err) => {\n            console.log(\"errrrr\", err)\n            alert(err.message);\n          }\n        ).catch((e) => {\n          console.log(\"Json parse error on response data\")\n        });\n      }\n    }).catch((err) => {\n      console.log(\"Api call error !!\")\n    });\n  }\n\n  protected handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    let username = this.state.username;\n    let text = this.state.text;\n\n    let error_msg = [] as string[];\n    error_msg = [...error_msg, ...this.validateEmptyValue(username, \"Username\")]\n    error_msg = [...error_msg, ...this.validateEmptyValue(text, \"Messagebox\")]\n    error_msg = [...error_msg, ...this.validateMaxMessageSize(text, \"Messagebox\", \"100\")]\n\n  \n    if (error_msg.length === 0) {\n\n      this.makeApiCall(username, text)\n    } else {\n      alert(error_msg.join(\" \\r\\n\"));\n    }\n  }\n\n}\n\ninterface State {\n  username: string;\n  text: string;\n}\n","import React from 'react';\nimport './App.css';\nimport { MessageFormPage} from './components/message-form-page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          A letter to Santa\n        </h1>\n      </header>\n\n      <main>\n  <MessageFormPage />\n      </main>\n\n      <footer>\n        Made with\n        <a href=\"https://glitch.com\">Glitch</a>!\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}